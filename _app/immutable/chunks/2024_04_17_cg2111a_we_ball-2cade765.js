import{S as Re,i as Pe,s as xe,k as o,q as i,a as d,l,m as r,r as n,h as t,c as p,b as k,G as e,C as ue}from"./index-91060271.js";function Me(Ce){let m,q,D,L,F,j,s,v,G,u,E,N,W,y,I,z,B,C,J,K,R,Q,V,b,X,g,P,Y,Z,x,$,ee,A,te,c,M,oe,le,w,re,ae,T,U,ie,ne,O,se;return{c(){m=o("p"),q=i("Remote Controlled Robot with HectorSLAM Mapping and Colour Identification."),D=d(),L=o("p"),F=i("Unique Features"),j=d(),s=o("ol"),v=o("li"),G=i("Protoboard"),u=o("ul"),E=o("li"),N=i("Modularity and Reliability"),W=d(),y=o("li"),I=o("u"),z=i("The Raspberry Pi can remotely reset and reprogram the Arduino through the UART GPIO Pins"),B=d(),C=o("li"),J=i("16x2 Onboard LCD for Telemetry"),K=d(),R=o("li"),Q=i("Acrylic Casing for Protection"),V=d(),b=o("li"),X=i("Firmware"),g=o("ul"),P=o("li"),Y=i("Precise movement using the ATMega2560’s Timers & the onboard Ultrasonic Sensor"),Z=d(),x=o("li"),$=i("Colour Sensing and Detection"),ee=d(),A=o("li"),te=i("Software"),c=o("ul"),M=o("li"),oe=i("WASD control"),le=d(),w=o("li"),re=i("HectorSLAM Mapping on a Laptop through ROS Networking"),ae=d(),T=o("li"),U=o("u"),ie=i("Command Line Scripts to easily reset/ reprogram the Arduino during the limited run duration (as well as implement a soft kill)"),ne=d(),O=o("li"),se=i("tmux scripts for fast deployment")},l(a){m=l(a,"P",{});var h=r(m);q=n(h,"Remote Controlled Robot with HectorSLAM Mapping and Colour Identification."),h.forEach(t),D=p(a),L=l(a,"P",{});var me=r(L);F=n(me,"Unique Features"),me.forEach(t),j=p(a),s=l(a,"OL",{});var f=r(s);v=l(f,"LI",{});var ce=r(v);G=n(ce,"Protoboard"),u=l(ce,"UL",{});var S=r(u);E=l(S,"LI",{});var he=r(E);N=n(he,"Modularity and Reliability"),he.forEach(t),W=p(S),y=l(S,"LI",{});var fe=r(y);I=l(fe,"U",{});var _e=r(I);z=n(_e,"The Raspberry Pi can remotely reset and reprogram the Arduino through the UART GPIO Pins"),_e.forEach(t),fe.forEach(t),B=p(S),C=l(S,"LI",{});var ge=r(C);J=n(ge,"16x2 Onboard LCD for Telemetry"),ge.forEach(t),S.forEach(t),ce.forEach(t),K=p(f),R=l(f,"LI",{});var Le=r(R);Q=n(Le,"Acrylic Casing for Protection"),Le.forEach(t),V=p(f),b=l(f,"LI",{});var de=r(b);X=n(de,"Firmware"),g=l(de,"UL",{});var H=r(g);P=l(H,"LI",{});var ve=r(P);Y=n(ve,"Precise movement using the ATMega2560’s Timers & the onboard Ultrasonic Sensor"),ve.forEach(t),Z=p(H),x=l(H,"LI",{});var be=r(x);$=n(be,"Colour Sensing and Detection"),be.forEach(t),H.forEach(t),de.forEach(t),ee=p(f),A=l(f,"LI",{});var pe=r(A);te=n(pe,"Software"),c=l(pe,"UL",{});var _=r(c);M=l(_,"LI",{});var Ae=r(M);oe=n(Ae,"WASD control"),Ae.forEach(t),le=p(_),w=l(_,"LI",{});var Se=r(w);re=n(Se,"HectorSLAM Mapping on a Laptop through ROS Networking"),Se.forEach(t),ae=p(_),T=l(_,"LI",{});var Ee=r(T);U=l(Ee,"U",{});var ye=r(U);ie=n(ye,"Command Line Scripts to easily reset/ reprogram the Arduino during the limited run duration (as well as implement a soft kill)"),ye.forEach(t),Ee.forEach(t),ne=p(_),O=l(_,"LI",{});var Ie=r(O);se=n(Ie,"tmux scripts for fast deployment"),Ie.forEach(t),_.forEach(t),pe.forEach(t),f.forEach(t)},m(a,h){k(a,m,h),e(m,q),k(a,D,h),k(a,L,h),e(L,F),k(a,j,h),k(a,s,h),e(s,v),e(v,G),e(v,u),e(u,E),e(E,N),e(u,W),e(u,y),e(y,I),e(I,z),e(u,B),e(u,C),e(C,J),e(s,K),e(s,R),e(R,Q),e(s,V),e(s,b),e(b,X),e(b,g),e(g,P),e(P,Y),e(g,Z),e(g,x),e(x,$),e(s,ee),e(s,A),e(A,te),e(A,c),e(c,M),e(M,oe),e(c,le),e(c,w),e(w,re),e(c,ae),e(c,T),e(T,U),e(U,ie),e(c,ne),e(c,O),e(O,se)},p:ue,i:ue,o:ue,d(a){a&&t(m),a&&t(D),a&&t(L),a&&t(j),a&&t(s)}}}const Te={title:'CG2111A "Alex" Robot',date:"2024-04-17",description:"Remote Controlled Robot with HectorSLAM Mapping and Colour Identification",link:"https://github.com/Hackin7/cg2111a_we_ball",tags:["School Project","Raspberry Pi","Arduino","ROS","C++","SLAM","LIDAR","Team Project"],cover:["/projects/cg2111a_alex_robot/alex_robot.png","/projects/cg2111a_alex_robot/slam1.png","/projects/cg2111a_alex_robot/slam2.png","/projects/cg2111a_alex_robot/tmux.png"]};class Ue extends Re{constructor(m){super(),Pe(this,m,null,Me,xe,{})}}export{Ue as default,Te as metadata};
